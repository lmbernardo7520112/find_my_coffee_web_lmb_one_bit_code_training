{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/lmbernardo/find_my_coffee_api/find_my_coffee_web/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport Establishment from './components/Establishment';\nimport EstablishmentsService from './services/establishment_service';\n\nfunction App() {\n  _s();\n\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [location, setLocations] = useState([]);\n  const [selected, setSelected] = useState({});\n  const {\n    REACT_APP_GOOGLE_API_KEY\n  } = process.env;\n  useEffect(() => {\n    setCurrentLocation();\n  }, []);\n\n  async function setCurrentLocation() {\n    await navigator.geolocation.getCurrentPosition(function (position) {\n      setLatitude(position.coords.latitude);\n      setLongitude(position.coords.longitude);\n      loadCoffeesShops();\n    }, function (error) {\n      alert(\"Habilite a localização para usar esse APP\");\n    });\n  }\n\n  async function loadCoffeesShops() {\n    const response = await EstablishmentsService.index(latitude, longitude);\n    setLocations(response.data.results);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(LoadScript, {\n      googleMapsApiKey: REACT_APP_GOOGLE_API_KEY,\n      children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n        mapContainerStyle: {\n          height: \"100vh\",\n          width: \"100%\"\n        },\n        zoom: 15,\n        center: {\n          lat: latitude,\n          lng: longitude\n        },\n        children: [/*#__PURE__*/_jsxDEV(Marker, {\n          icon: \"/images/my-location-pin.png\",\n          position: {\n            lat: latitude,\n            lng: longitude\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 15\n        }, this), location.map((item, index) => {\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            icon: \"/home/lmbernardo/find_my_coffee_api/find_my_coffee_web/public/images/coffee-pin.png\",\n            title: item.name,\n            animation: \"4\",\n            position: {\n              lat: item.geometry.location.lat,\n              lng: item.geometry.location.lng\n            },\n            onClick: () => setSelected(item)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 23\n          }, this);\n        }), selected.place_id && /*#__PURE__*/_jsxDEV(Establishment, {\n          place: selected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(Marker, {\n          icon: \"./public/images/my-location-pin.png\",\n          title: \"Seu local\",\n          animation: \"2\",\n          position: {\n            lat: latitude,\n            lng: longitude\n          }\n        }, \"my location\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 7\n  }, this);\n}\n\n_s(App, \"utbSW4pPDKiCmPO354UoiFeoXJM=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/lmbernardo/find_my_coffee_api/find_my_coffee_web/src/App.js"],"names":["React","Fragment","useState","useEffect","GoogleMap","LoadScript","Marker","Establishment","EstablishmentsService","App","latitude","setLatitude","longitude","setLongitude","location","setLocations","selected","setSelected","REACT_APP_GOOGLE_API_KEY","process","env","setCurrentLocation","navigator","geolocation","getCurrentPosition","position","coords","loadCoffeesShops","error","alert","response","index","data","results","height","width","lat","lng","map","item","name","geometry","place_id"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\nimport { GoogleMap, LoadScript, Marker } from '@react-google-maps/api';\nimport Establishment from './components/Establishment';\n\nimport EstablishmentsService from './services/establishment_service';\n\nfunction App() {\n  const [latitude, setLatitude] = useState(0);\n  const [longitude, setLongitude] = useState(0);\n  const [location, setLocations] = useState([]);\n  const [selected, setSelected] = useState({});\n\n  const {REACT_APP_GOOGLE_API_KEY}=process.env;\n\n  useEffect(() => {\n    setCurrentLocation();\n  }, [])\n \n  \n  async function setCurrentLocation() {\n    await navigator.geolocation.getCurrentPosition(function (position) {\n      setLatitude(position.coords.latitude);\n      setLongitude(position.coords.longitude);\n      loadCoffeesShops();\n    }, function(error) {\n      alert(\"Habilite a localização para usar esse APP\")\n    })\n  }\n  \n  async function loadCoffeesShops() {\n    const response = await EstablishmentsService.index(latitude, longitude);\n    setLocations(response.data.results);\n  }\n\n  return (\n      <Fragment>\n          <LoadScript googleMapsApiKey={REACT_APP_GOOGLE_API_KEY}>\n            <GoogleMap mapContainerStyle={{height: \"100vh\", width: \"100%\"}}\n              zoom={15}\n              center={{lat: latitude, lng: longitude}}>\n              \n              <Marker icon='/images/my-location-pin.png'\n               position={{ lat: latitude, lng: longitude }}\n               />\n               {\n                 location.map((item, index) => {\n                    return(\n                      <Marker key={index} icon=\"/home/lmbernardo/find_my_coffee_api/find_my_coffee_web/public/images/coffee-pin.png\" title={item.name} animation= \"4\" \n                          position={{lat: item.geometry.location.lat, lng: item.geometry.location.lng}}\n                          onClick={() => setSelected(item)}\n                      />\n                    )\n                 })\n               }\n               {\n                 selected.place_id && (\n                 <Establishment place={selected}/>\n                )\n              }\n               <Marker key=\"my location\" icon=\"./public/images/my-location-pin.png\" title=\"Seu local\" animation= \"2\"\n                   position={{lat: latitude, lng: longitude}}\n               />    \n              </GoogleMap>\n          </LoadScript>\n      </Fragment>\n );\n}\n\nexport default App;\n\n\n"]},"metadata":{},"sourceType":"module"}